import { useState } from "react";

export const TYPES = {
  GET: "GETDATA",
  CREATE: "POST",
  UPDATE: "PUT",
  DELETE: "DELETE",
};

const useAPI = (url) => {
  const [data, setData] = useState([]);
  const [idCounter, setIdCounter] = useState(1);

  const handleOperation = async (type, payload) => {
    switch (type) {
      case TYPES.GET:
        //GETS ALL DATA FROM SERVER, TO GET CHANGES FROM DATABASE
        break;
      case TYPES.CREATE:
        setData((prev) => [...prev, { ...payload, id: idCounter.toString() }]);
        setIdCounter((prev) => prev + 1);
        break;
      case TYPES.UPDATE:
        setData((prev) => {
          const arr = prev.map((data) => {
            if (data.id === payload.id) {
              return {...data, ...payload.updatedData}
            }
            return data;
          });
          return arr;
        });
        break;
      case TYPES.DELETE:
        setData((prev) => prev.filter((data) => data.id !== payload.id));
        break;
      default: 
        throw "Invalid Type";
    }
  };

  return [data, handleOperation];
};

export default useAPI;

/*
useAPI hook: 
This hook lets you manage an API with ease, while storing its data in state
and lets you perform CRUD Operations on it and updates state along with data

Make sure that your API endpoint follows these guidelines.

-Whatever you are passing to the hook, make sure GET, POST, PUT & DELETE
all there operations are setup from the backend
-IDs are autogenerated from the backend with POST
-id field is named as it is in payload
*/