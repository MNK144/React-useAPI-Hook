/*
Dependencies: Axios
*/

import { useEffect, useState } from "react";
import axios from "axios";

export const TYPES = {
  GET: "GET",
  CREATE: "POST",
  UPDATE: "PUT",
  DELETE: "DELETE",
};

let API;

const useAPI = (url) => {
  const [data, setData] = useState([]);

  const getDataFromServer = async () => {
    const serverData = await API.get("/");
    setData(serverData.data);
    return serverData;
  };
  useEffect(() => {
    API = axios.create({ baseURL: url });
    getDataFromServer();
  }, [url]);

  //Returns "response" from axios request
  const handleOperation = async (type, payload) => {
    let res;
    switch (type) {
      case TYPES.GET:
        res = await getDataFromServer();
        break;
      case TYPES.CREATE:
        res = await API.post("/", payload);
        setData((prev) => [...prev, { ...payload, id: res.data.id }]);
        break;
      case TYPES.UPDATE:
        res = await API.put("/",payload);
        setData((prev) => {
          const arr = prev.map((data) => {
            if (data.id === payload.id) {
              return { ...data, ...payload.updateData };
            }
            return data;
          });
          return arr;
        });
        break;
      case TYPES.DELETE:
        res = await API.delete("/",{ data: payload });
        setData((prev) => prev.filter((data) => data.id !== payload.id));
        break;
      default:
        // eslint-disable-next-line
        throw "Invalid Type";
    }
    return res;
  };

  return [data, handleOperation];
};

export default useAPI;

/*
useAPI hook: 
This hook lets you manage an API with ease, while storing its data in state
and lets you perform CRUD Operations on it and updates state along with data

Make sure that your API endpoint follows these guidelines.

-Whatever you are passing to the hook, make sure GET, POST, PUT & DELETE
all there operations are setup from the backend
-IDs are autogenerated from the backend with POST
-id field is named as it is in payload
-For update operation, pass an { id } and { updateData }, where updateData 
will contain payload of fields to update
*/
